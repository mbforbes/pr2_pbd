"""autogenerated by genpy from pr2_pbd_speech_recognition/Command.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Command(genpy.Message):
  _md5sum = "ae3ca1bdc9ed6ba8b8a0a9f41b6af7a6"
  _type = "pr2_pbd_speech_recognition/Command"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """string TEST_MICROPHONE = test-microphone
string RELAX_RIGHT_ARM = relax-right-arm
string RELAX_LEFT_ARM = relax-left-arm
string OPEN_RIGHT_HAND = open-right-hand
string OPEN_LEFT_HAND = open-left-hand
string CLOSE_RIGHT_HAND = close-right-hand
string CLOSE_LEFT_HAND = close-left-hand
string STOP_EXECUTION = stop-execution
string UNDO = undo-last-command
string DELETE_ALL_STEPS = delete-all-steps
string DELETE_LAST_STEP = delete-last-step
string FREEZE_RIGHT_ARM = freeze-right-arm
string FREEZE_LEFT_ARM = freeze-left-arm
string RECORD_OBJECT_POSE = record-object-pose
string CREATE_NEW_ACTION = create-new-action
string EXECUTE_ACTION = execute-action
string NEXT_ACTION = next-action
string PREV_ACTION = previous-action
string SAVE_ACTION = save-action
string EDIT_ACTION = edit-action
string SAVE_POSE = save-pose
string START_RECORDING_MOTION = start-recording-motion
string STOP_RECORDING_MOTION = stop-recording-motion
string DEMO_START = demo-start
string DEMO_PAUSE = demo-pause
string DEMO_RESTART = demo-restart
string UNRECOGNIZED = unrecognized
string command

"""
  # Pseudo-constants
  TEST_MICROPHONE = 'test-microphone'
  RELAX_RIGHT_ARM = 'relax-right-arm'
  RELAX_LEFT_ARM = 'relax-left-arm'
  OPEN_RIGHT_HAND = 'open-right-hand'
  OPEN_LEFT_HAND = 'open-left-hand'
  CLOSE_RIGHT_HAND = 'close-right-hand'
  CLOSE_LEFT_HAND = 'close-left-hand'
  STOP_EXECUTION = 'stop-execution'
  UNDO = 'undo-last-command'
  DELETE_ALL_STEPS = 'delete-all-steps'
  DELETE_LAST_STEP = 'delete-last-step'
  FREEZE_RIGHT_ARM = 'freeze-right-arm'
  FREEZE_LEFT_ARM = 'freeze-left-arm'
  RECORD_OBJECT_POSE = 'record-object-pose'
  CREATE_NEW_ACTION = 'create-new-action'
  EXECUTE_ACTION = 'execute-action'
  NEXT_ACTION = 'next-action'
  PREV_ACTION = 'previous-action'
  SAVE_ACTION = 'save-action'
  EDIT_ACTION = 'edit-action'
  SAVE_POSE = 'save-pose'
  START_RECORDING_MOTION = 'start-recording-motion'
  STOP_RECORDING_MOTION = 'stop-recording-motion'
  DEMO_START = 'demo-start'
  DEMO_PAUSE = 'demo-pause'
  DEMO_RESTART = 'demo-restart'
  UNRECOGNIZED = 'unrecognized'

  __slots__ = ['command']
  _slot_types = ['string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       command

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Command, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.command is None:
        self.command = ''
    else:
      self.command = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.command
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.command = str[start:end].decode('utf-8')
      else:
        self.command = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.command
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.command = str[start:end].decode('utf-8')
      else:
        self.command = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
